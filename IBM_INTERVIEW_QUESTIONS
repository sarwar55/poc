** Explain the events when a url is entered into a browser start to finish



** Given a string of repeated characters, the task is to rearrange characters in a string such that no two adjacent characters are same.

** What is the difference between processes and threads?

** Web/async nature of js. Async fetch problem.

** Given a 2 dimensional array of landing and leaving time of planes, get the maximum number of planes in the airport.

**  What is the difference between deep copy and shallow copy? 

** programming: string manipulation, map, set 

** Java polymorphism, 3 coding questions, binary search  

** Two Sum Algorithm
public static void main(String[] args) {
		int[] arr = new int[] { 1, 2, 2, 2, 3, 4, 4, 4, 1, 0, 5 };
		int sum = 5;
		System.out.println("Value pairs");
		Map<Integer, Integer> pairs = getUniqueSomePairs(arr, sum);
		pairs.forEach((k, v) -> System.out.println(k + " " + v));
		System.out.println("Index pairs");
		Map<Integer, Integer> indices = getUniqueSomePairIndices(arr, sum);
		indices.forEach((k, v) -> System.out.println(k + " " + v));

	}

	private static Map<Integer, Integer> getUniqueSomePairs(int[] arr, int sum) {
		Set<Integer> values = new HashSet<>();
		Map<Integer, Integer> uniquePairs = new HashMap<>();
		for (int i = 0; i < arr.length; i++) {
			int diff = sum - arr[i];
			if (values.contains(diff) && !uniquePairs.containsKey(diff) && !values.contains(arr[i])) {
				uniquePairs.put(diff, arr[i]);
			} else
				values.add(arr[i]);
		}
		return uniquePairs;
	}

	private static Map<Integer, Integer> getUniqueSomePairIndices(int[] arr, int sum) {
		Map<Integer, Integer> pairs = new HashMap<>();
		Map<Integer, Integer> uniquePairs = new HashMap<>();
		for (int i = 0; i < arr.length; i++) {
			int diff = sum - arr[i];
			if (pairs.containsKey(diff) && !uniquePairs.containsKey(pairs.get(diff)) && !pairs.containsKey(arr[i])) {
				uniquePairs.put(pairs.get(diff), i);
			} else
				pairs.put(arr[i], i);
		}
		return uniquePairs;
	}

** function nStrStr(str1, str2) How many str1 appeared in str2  

** Define polymorphism 

** Given a list of passages filter out the duplicate passages by comparing only alphanumeric characters.

** Given an input of employee names and their managers (john->mary) create a way to search for the closest common manager given two employees that were having conflict.

**  find missing number problem

** hashmap txt manipulation, reverse string

** Tree questions, sorting question, regex question through timed 

** What is fastest: Heap, Merge, or Quick sort.  

**  basic string and arrays questions. BST  

** What is a deadlock?  

** Write a method that determines if a string is a palindrome.

** reverse a string, and capitalize correctly: Hello World -> Dlrow Olleh  

** Write a method to flatten and re-arrange a json structure.  

** Create a random string (without using library functions) with a given length. 

** Sort an array by mod3 -
All elements of mod3=0 would be before all elements of mod3=1... So on. Do it in linear time.

** Print the power set of the given set.  

** Explain how hash table works. 

** What is the difference between a pointer and a reference?  

** Why is the main method in a java class static ?  

** File traversal questions, fizz buzz type question, concept questions, oop question  

** implement some basic data structures like trees, merge sort, finally merging an array of linkedlists

public class MergeSort {
	
	private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {

        for (int k = lo; k <= hi; k++) {
            aux[k] = a[k]; 
        }

        int i = lo, j = mid+1;
        for (int k = lo; k <= hi; k++) {
            if      (i > mid)              a[k] = aux[j++];
            else if (j > hi)               a[k] = aux[i++];
            else if (aux[j]< aux[i])       a[k] = aux[j++];
            else                           a[k] = aux[i++];
        }

    }

    private static void sort(int[] a, int[] aux, int lo, int hi) {
        if (hi <= lo) return;
        int mid = lo + (hi - lo) / 2;
        sort(a, aux, lo, mid);
        sort(a, aux, mid + 1, hi);
        merge(a, aux, lo, mid, hi);
    }
    
    public static void sort(int[] a) {
        int[] aux = new int[a.length];
        sort(a, aux, 0, a.length-1);
    }


	public static void main(String[] args) {
		int[] a = {13, 7, 6, 45, 21, 9, 101, 102};
		MergeSort.sort(a);
		System.out.println(Arrays.toString(a));

	}

}

** Why IBM?

** What do you know about IBM?

** What interests you about the position?

** Parallel querying of databases

** concurrency design  


** Fibonacci series? 

** Given a level of a tree (level k) , print all of nodes at that level.

** the rotation of the BST.

** write pseudo code to add a node to a singly linked list

** What is the difference between a list and a set?  

**How would you design an ATM? 

** Do an in-order BST walk without additional data structures and without recursion. 

** Binary Tree and hash tables with its collision resolutions. 

** binary search tree implementation with Java.  

** What is reflection in java?  

** Sort the integers in an array

** Design an elevator system

** Some question involving linkedlist and hash table.  

** What is polymorphism?  

** If you were given a prototype pen (yes, a pen) how would you go about testing it?  

** Name three Linux commands and how they work  

** How do you list the permissions of a file?  

** What would you do differently with x project (past project)?  

** Why IBM?  

** How to implement a hashmap, and write the code.

** Given a linkedlist, how to detect whether it has a cycle ,if has, how to find out where is the cycle begin.

** Print the values in 2D matrix in spiral order. The dimension of the matrix is n x m. 
































